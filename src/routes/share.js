const express = require('express');
const router = express.Router();
const supabase = require('../services/supabase');

// Middleware to check authentication
const authenticateUser = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: 'No token provided' });
    }

    const { data: { user }, error } = await supabase.auth.getUser(token);
    if (error) throw error;
    req.user = user;
    next();
  } catch (error) {
    console.error('Authentication error:', error.message);
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Get a specific summary by ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { data, error } = await supabase
      .from('summaries')
      .select('*')
      .eq('id', id)
      .single();

    if (error) throw error;

    res.json({
      ...data,
      disclaimer: "This summary was generated by BrevityIQ. While we strive for accuracy, please verify important information from the original source."
    });
  } catch (error) {
    console.error('Error fetching summary:', error.message);
    res.status(404).json({ error: 'Summary not found' });
  }
});

// Update a summary (only by the owner)
router.put('/:id', authenticateUser, async (req, res) => {
  try {
    const { id } = req.params;
    const { summary } = req.body;

    if (!summary) {
      return res.status(400).json({ error: 'Summary text is required' });
    }

    // Check if the user owns this summary
    const { data: existingSummary, error: fetchError } = await supabase
      .from('summaries')
      .select('user_id')
      .eq('id', id)
      .single();

    if (fetchError) throw fetchError;
    if (existingSummary.user_id !== req.user.id) {
      return res.status(403).json({ error: 'Not authorized to edit this summary' });
    }

    // Update the summary
    const { data, error } = await supabase
      .from('summaries')
      .update({ summary, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select();

    if (error) throw error;

    res.json({
      message: 'Summary updated successfully',
      summary: data[0],
    });
  } catch (error) {
    console.error('Error updating summary:', error.message);
    res.status(500).json({ error: error.message });
  }
});

// Delete a summary (only by the owner)
router.delete('/:id', authenticateUser, async (req, res) => {
  try {
    const { id } = req.params;

    // Check if the user owns this summary
    const { data: existingSummary, error: fetchError } = await supabase
      .from('summaries')
      .select('user_id')
      .eq('id', id)
      .single();

    if (fetchError) throw fetchError;
    if (existingSummary.user_id !== req.user.id) {
      return res.status(403).json({ error: 'Not authorized to delete this summary' });
    }

    const { error } = await supabase
      .from('summaries')
      .delete()
      .eq('id', id);

    if (error) throw error;

    res.json({ message: 'Summary deleted successfully' });
  } catch (error) {
    console.error('Error deleting summary:', error.message);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router; 